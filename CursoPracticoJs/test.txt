Variables y operaciones.

1Ô∏è‚É£ Responde las siguientes preguntas

¬øQu√© es una variable y para qu√© sirve?
R = Una variable es una reservaci√≥n de espacio en memoria y sirve para guardar valores
Temporalmente para hacer uso de ellas.

¬øCu√°l es la diferencia entre declarar e inicializar una variable?
R = La diferencia es, que declarar una variable simplemente es declararla sin un valor
en especifico e inicializar una variable es asignarle un valor a dicha variable.

¬øCu√°l es la diferencia entre sumar n√∫meros y concatenar strings?
R = La diferencia radica en que para sumar numeros tienen que ser de tipo number y
concatenar un string puede ser con cadenas, pero as√≠ mismo puedes concatenar otro tipo de
dato, siempre y cuando tenga un string para concatenar, ejemplo: 12 + "20" = "1220"

¬øCu√°l operador me permite sumar o concatenar?
R = El operador (+)



2Ô∏è‚É£ Determina el nombre y tipo de dato para almacenar en variables la siguiente informaci√≥n:

* Nombre: name - string
* Apellido: lastname - string
* Nombre de usuario en Platzi: usernamePlatzi - string 
* Edad: age - number
* Correo electr√≥nico: email - string 
* Mayor de edad: isAdult - boolean
* Dinero ahorrado: savedMoney - number
* Deudas: debts - number



3Ô∏è‚É£ Traduce a c√≥digo JavaScript las variables del ejemplo anterior y deja tu c√≥digo en los comentarios.

let name = "Orlando";
let lastname = "Hernandez";
let usernamePlatzi = "orlahdz99";
let age = 23;
let email = "orla@gmail.com";
let isAdult = true;
let savedMoney = 20000,
let debts = 0;



4Ô∏è‚É£ Calcula e imprime las siguientes variables a partir de las variables del ejemplo anterior:

- Nombre completo (nombre y apellido)
- Dinero real (dinero ahorrado menos deudas)

console.log(`${name} ${lastname}`);
console.log(`Dinero real: ${savedMoney - debts}`);


----------------------------------------------------------------------------------------------------------

Funciones

1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:

¬øQu√© es una funci√≥n?
R = Una funci√≥n es un fragmento de c√≥digo que ejecuta una funcionalidad y que puede ser reutilizable
en otra parte del c√≥digo.

¬øCu√°ndo me sirve usar una funci√≥n en mi c√≥digo?
R = Cuando tienes c√≥digo que no quieres repetir y que usaras en otros fragmentos de l√≠nea.

¬øCu√°l es la diferencia entre par√°metros y argumentos de una funci√≥n?
R = La diferencia es que los parametros son los valores que va a aceptar nuestra funci√≥n y
en cambio los argumentos son los valores que se le pasan a nuestra funci√≥n.


2Ô∏è‚É£ Convierte el siguiente c√≥digo en una funci√≥n, pero, cambiando cuando sea necesario las variables 
constantes por par√°metros y argumentos en una funci√≥n:

const name = "Juan David";
const lastname = "Castro Gallego";
const completeName = name + lastname;
const nickname = "juandc";

console.log("Mi nombre es " + completeName + ", pero prefiero que me digas " + nickname + ".");

function presentacion(name, lastname, nickname) {
    console.log(`Mi nombre es ${name} ${lastname}, pero prefiero que me digas ${nickname}.`);
}


----------------------------------------------------------------------------------------------------------

Condicionales

1Ô∏è‚É£ Responde las siguientes preguntas:

¬øQu√© es un condicional?
R = Es una sentencia que nos permite validar una condici√≥n.

¬øQu√© tipos de condicionales existen en JavaScript y cu√°les son sus diferencias?
R = Existen los condicionales if, ternarios y switch. Sus diferencias unicamente cambia
en la estructura de c√≥digo, porque basicamente ambas te sirven para validar una condici√≥n.

¬øPuedo combinar funciones y condicionales?
R = Claro dentro de una funci√≥n puedes declarar variables.


2Ô∏è‚É£ Replica el comportamiento del siguiente c√≥digo que usa la sentencia switch utilizando if, else y else if:

const tipoDeSuscripcion = "Basic";

switch (tipoDeSuscripcion) {
   case "Free":
       console.log("Solo puedes tomar los cursos gratis");
       break;
   case "Basic":
       console.log("Puedes tomar casi todos los cursos de Platzi durante un mes");
       break;
   case "Expert":
       console.log("Puedes tomar casi todos los cursos de Platzi durante un a√±o");
       break;
   case "ExpertPlus":
       console.log("T√∫ y alguien m√°s pueden tomar TODOS los cursos de Platzi durante un a√±o");
       break;
}


if (tipoDeSuscripcion === "Free") {
    console.log("Solo puedes tomar los cursos gratis");
} else if (tipoDeSuscripcion === "Basic") {
    console.log("Puedes tomar casi todos los cursos de Platzi durante un mes");
} else if (tipoDeSuscripcion === "Expert") {
    console.log("Puedes tomar casi todos los cursos de Platzi durante un a√±o");
} else if (tipoDeSuscripcion === "ExpertPlus") {
    console.log("T√∫ y alguien m√°s pueden tomar TODOS los cursos de Platzi durante un a√±o");
} else {
    console.log("Tipo de suscripci√≥n no valida");
}


3Ô∏è‚É£ Replica el comportamiento de tu condicional anterior con if, else y else if, pero ahora solo con 
    if (sin else ni else if).

if (tipoDeSuscripcion === "Free") {
    console.log("Solo puedes tomar los cursos gratis");
} 

if (tipoDeSuscripcion === "Basic") {
    console.log("Puedes tomar casi todos los cursos de Platzi durante un mes");
} 

if (tipoDeSuscripcion === "Expert") {
    console.log("Puedes tomar casi todos los cursos de Platzi durante un a√±o");
} 

if (tipoDeSuscripcion === "ExpertPlus") {
    console.log("T√∫ y alguien m√°s pueden tomar TODOS los cursos de Platzi durante un a√±o");
} 


üí° Bonus: si ya eres una experta o experto en el lenguaje, te desaf√≠o a comentar c√≥mo replicar este 
comportamiento con arrays u objetos y un solo condicional. üòè

const typeSuscription = "Basic";

let suscriptions = {
    "free" : "Solo puedes tomar los cursos gratis",
    "Basic": "Puedes tomar casi todos los cursos de Platzi durante un mes",
    "Expert": "Puedes tomar casi todos los cursos de Platzi durante un a√±o",
    "ExpertPlus": "T√∫ y alguien m√°s pueden tomar TODOS los cursos de Platzi durante un a√±o"
};

if (suscriptions[typeSuscription]) {
  console.log(suscriptions[typeSuscription]);
} else {
   console.log("No tienes ninguna suscripci√≥n");
}


----------------------------------------------------------------------------------------------------------

Ciclos

1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:

¬øQu√© es un ciclo?
R = Es la forma de ejecutar un bloque de c√≥digo hasta que se cumpla cierta condici√≥n.

¬øQu√© tipos de ciclos existen en JavaScript?
R = Existen varios: for, forEach, While y Do-While.

¬øQu√© es un ciclo infinito y por qu√© es un problema?
R = Es cuando no se tiene algo para finalizar la repetici√≥n del c√≥digo y es un problema
ya que esta te puede causar problemas en la memoria ram.

¬øPuedo mezclar ciclos y condicionales?
R = Claro, es posible mezclar ciclos y condicionales.


2Ô∏è‚É£ Replica el comportamiento de los siguientes ciclos for utilizando ciclos while:

for (let i = 0; i < 5; i++) {
    console.log("El valor de i es: " + i);
}

let i = 0;
while (i < 5) {
    console.log("El valor de i es: " + i);
    i++;
}


for (let i = 10; i >= 2; i--) {
    console.log("El valor de i es: " + i);
}

let i = 10;
while (i >= 2) {
    console.log("El valor de i es: " + i);
    i--;
}


3Ô∏è‚É£ Escribe un c√≥digo en JavaScript que le pregunte a los usuarios cu√°nto es 2 + 2. Si responden bien, 
mostramos un mensaje de felicitaciones, pero si responden mal, volvemos a empezar.

üí° Pista: puedes usar la funci√≥n prompt de JavaScript.

bandera = true;

while (bandera) {
    let respuesta = prompt("cu√°nto es 2 + 2");

    if (respuesta == 4) {
        console.log("mensaje de felicitaciones");
        bandera = false;
    }
}

----------------------------------------------------------------------------------------------------------

Listas

1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:

¬øQu√© es un array?
R = Es una estructura de datos que almacena por indice diferente tipos de valores.

¬øQu√© es un objeto?
R = Es una estructura de datos que representa a como se guardar√≠a la informaci√≥n en el mundo real.
cada elemento tiene un nombre clave.

¬øCu√°ndo es mejor usar objetos o arrays?
R = Arrays cuando lo que haremos en un elemento es lo mismo que en todos los demas (la regla se puede
    incumplir). Mientras que un objeto cuando los nombres de cada elemento son importantes para nuestro
    algoritmo.

¬øPuedo mezclar arrays con objetos o incluso objetos con arrays?
R = Si, es posible mezclar.


2Ô∏è‚É£ Crea una funci√≥n que pueda recibir cualquier array como par√°metro e imprima su primer elemento.

const cars = ["Toyoya", "Mercedez", "Ferrari", "Nissan"];

function imprimirPrimerElemento(cars) {
    console.log(cars[0]);
}

imprimirPrimerElemento(cars);


3Ô∏è‚É£ Crea una funci√≥n que pueda recibir cualquier array como par√°metro e imprima todos sus elementos 
    uno por uno (no se vale imprimir el array completo).

const cars = ["Toyoya", "Mercedez", "Ferrari", "Nissan"];

function impirmirValoresCars(cars) {
    cars.forEach(function(car){
      console.log(car);
    })
}

impirmirValoresCars(cars);


4Ô∏è‚É£ Crea una funci√≥n que pueda recibir cualquier objeto como par√°metro e imprima todos sus elementos 
    uno por uno (no se vale imprimir el objeto completo).

const gato = {
    nombre: "Michi",
    patas: 4,
    tipo: "Felino"
};  

function impirmirValoresObjeto(objeto) {
    for (item in objeto) {
        console.log(`${item}: ${objeto[item]}`);
    }

    // otra forma.
    const arr = Object.values(objeto);
    for (let i = 0; i < arr.lenght; i++) {
        console.log(arr[i]);
    }
}

impirmirValoresObjeto(gato);